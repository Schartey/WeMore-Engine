#version 430

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std430, binding = 0) buffer Pos1
{ vec4 Position_In[]; };
layout(std430, binding = 1) buffer Vel1
{ vec4 Velocity_In[]; };
layout(std430, binding = 2) buffer Pos2
{ vec4 Position_Out[]; };
layout(std430, binding = 3) buffer Vel2
{ vec4 Velocity_Out[]; };

layout (binding = 4, offset = 0) uniform atomic_uint Count;

uniform uint lastCount;
uniform float deltaT;
uniform uint maxParticles;

const vec3 GRAVITY = vec3(0, -9.81f, 0);

void addParticleToOutputList(vec3 pos, vec3 vel, float TTL)	{
	// increment the atomic counter and use its previous value:
	uint nr = atomicCounterIncrement(Count);
	if (nr >= maxParticles) {
		// we are out of memory
		atomicCounterDecrement(Count);
		return;
	}
	Position_Out[nr] = vec4(pos, TTL);
	Velocity_Out[nr] = vec4(vel, 0);
}

void main(){
  uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;

	if(idx >= lastCount) return;

	// update pos, speed, ...
	float TTL = Position_In[idx].w - deltaT;
	if (TTL > 0) { // particle‘s still alive - pos = Position_In[idx]?
		addParticleToOutputList(Position_In[idx].xyz, Velocity_In[idx].xyz, TTL);
	}
}